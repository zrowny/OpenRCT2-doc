{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "OpenRCT2 JSON Object Format",
	"type": "object",
	"properties": {
		"id": {
			"description": "OpenRCT2 id of the object. This should be formatted as \"objectsource.objectname\" or similar. This value MUST be unique for all objects.",
			"type": "string"
		},
		"authors": {
			"description": "Array containing the authors of the object",
			"type": "array",
			"items": {
						"description": "The name of (one of) the author(s)",
						"type": "string"
			},
			"examples": [
				[ "spacek531" ],
				[ "Chris Sawyer", "Simon Foster" ]
			]
		},
		"version": {
			"description": "Version of the object",
			"type": "string",
			"examples": [ "1.0" ]
		},
		"originalId": {
			"description": "[Deprecated for new objects]. Represents the original DAT header. The three sections are the flags, name, and checksum. This shouldn't be used for new (not converted) objects",
			"type": "string",
			"examples": [ "00000000|RMCT2   |00003000", "0A188A80|4X4     |0DB8676C" ]
		},
		"sourceGame": {
			"description": "The source(s) of the object. Either a single string or an array containing each source",
			"anyOf": [
				{
					"title": "Source String",
					"$ref": "#/definitions/sourceString"
				},
				{
					"title": "Array of Source Strings",
					"type": "array",
					"items": {
						"$ref": "#/definitions/sourceString"
					}
				}
			]
		},
		"objectType": {
			"description": "The type of the object",
			"type": "string",
			"enum": [ "ride", "footpath", "footpath_banner", "footpath_item", "scenery_small", "scenery_large", "scenery_wall", "scenery_group", "park_entrance", "water", "terrain_surface", "terrain_edge", "station", "music", "footpath_surface", "footpath_railings" ]
		},
		"images": {
			"description": "The location of images for the object",
			"type": "array",
			"items": {
				"anyOf": [
					{
						"description": "An explanation about the purpose of this instance.",
						"type": "object",
						"properties": {
							"path": {
								"description": "An explanation about the purpose of this instance.",
								"type": "string"
							},
							"x": {
								"description": "An explanation about the purpose of this instance.",
								"type": "integer"
							},
							"y": {
								"description": "An explanation about the purpose of this instance.",
								"type": "integer"
							}
						}
					},
					{
						"description": "An explanation about the purpose of this instance.",
						"type": "string",
						"examples": [ "" ]
					}
				]
			},
			"examples": [
				[
					{
						"path": "images/preview.png",
						"x": 0,
						"y": 0
					},
					""
				]
			]
		},
		"strings": {
			"description": "Contains the various strings used for the object",
			"type": "object",
			"properties": {
				"name": {
					"description": "Contains the name of the object in all the different supported languages",
					"type": "object",
					"properties": {
						"en-GB": {
							"type": "string"
						}
					},
					"examples": [
						{ "en-GB": "Single Rail Roller Coaster Trains" }
					]
				},
				"description": {
					"description": "Contains a short description of the object in all the different supported languages",
					"type": "object",
					"properties": {
						"en-GB": {
							"type": "string"
						}
					},
					"examples": [
						{ "en-GB": "Riders ride single file on a narrow monorail track as they race through tight inversions and direction changes" }
					]
				},
				"capacity": {
					"description": "For rides, this contains text describing the capacity in all the different supported languages",
					"type": "object",
					"properties": {
						"en-GB": {
							"type": "string"
						}
					},
					"examples": [
						{ "en-GB": "1 passenger per car" }
					]
				}
			},
			"examples": [
				{
					"name": { "en-GB": "Single Rail Roller Coaster Trains" },
					"description": { "en-GB": "Riders ride single file on a narrow monorail track as they race through tight inversions and direction changes" },
					"capacity": { "en-GB": "1 passenger per car" }
				}
			]
		},
		"properties": {
			"description": "This object contains all the properties of the object",
			"type": "object"
		}
	},
	"required": [ "id", "authors", "objectType" ],
	"allOf": [
		{
			"title": "If Park Entrance",
			"if": {
				"properties": {
					"objectType": { "const": "park_entrance" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"properties": {
							"scrollingMode": { "$ref": "#/definitions/scrollingMode" },
							"textHeight": { "$ref": "#/definitions/textHeight" }
						},
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Footpath",
			"if": {
				"properties": {
					"objectType": { "const": "footpath" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"properties": {
							"supportType": { "$ref": "#/definitions/supportType" },
							"scrollingMode": { "$ref": "#/definitions/scrollingMode" },
							"noSlopeRailings": { "$ref": "#/definitions/noSlopeRailings" },
							"hasSupportImages": { "$ref": "#/definitions/hasSupportImages" },
							"hasElevatedPathImages": { "$ref": "#/definitions/hasElevatedPathImages" },
							"editorOnly": { "$ref": "#/definitions/editorOnly" }
						},
						"required": [ "supportType", "scrollingMode" ]
					}
				}
			}
		},
		{
			"title": "If Footpath Railings",
			"if": {
				"properties": {
					"objectType": { "const": "footpath_railings" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"properties": {
							"supportType": { "$ref": "#/definitions/supportType" },
							"scrollingMode": { "$ref": "#/definitions/scrollingMode" },
							"colour": { "$ref": "#/definitions/colour" },
							"hasSupportImages": { "$ref": "#/definitions/hasSupportImages" },
							"hasElevatedPathImages": { "$ref": "#/definitions/hasElevatedPathImages" }
						},
						"required": [ "supportType", "scrollingMode" ]
					}
				}
			}
		},
		{
			"title": "If Footpath Surface",
			"if": {
				"properties": {
					"objectType": { "const": "footpath_surface" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"properties": {
							"isQueue": { "$ref": "#/definitions/isQueue" },
							"noSlopeRailings": { "$ref": "#/definitions/noSlopeRailings" },
							"editorOnly": { "$ref": "#/definitions/editorOnly" }
						}
					}
				}
			}
		},
		{
			"title": "If Music",
			"if": {
				"properties": {
					"objectType": { "const": "music" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"properties": {
							"originalStyleId": { "$ref": "#/definitions/originalStyleId" },
							"rideTypes": { "$ref": "#/definitions/rideTypes" },
							"tracks": { "$ref": "#/definitions/tracks" }
						},
						"required": [ "tracks" ]
					}
				}
			}
		},
		{
			"title": "If Ride",
			"if": {
				"properties": {
					"objectType": { "const": "ride" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"properties": {
							"type": { "$ref": "#/definitions/type" },
							"category": { "$ref": "#/definitions/category" },
							"maxHeight": { "$ref": "#/definitions/maxHeight" },
							"carColours": { "$ref": "#/definitions/carColours" },
							"buildMenuPriority": { "$ref": "#/definitions/buildMenuPriority" },
							"noInversions": { "$ref": "#/definitions/noInversions" },
							"noBanking": { "$ref": "#/definitions/noBanking" },
							"playDepartSound": { "$ref": "#/definitions/playDepartSound" },
							"playSplashSound": { "$ref": "#/definitions/playSplashSound" },
							"playSplashSoundSlide": { "$ref": "#/definitions/playSplashSoundSlide" },
							"hasShelter": { "$ref": "#/definitions/hasShelter" },
							"limitAirTimeBonus": { "$ref": "#/definitions/limitAirTimeBonus" },
							"disableBreakdown": { "$ref": "#/definitions/disableBreakdown" },
							"noCollisionCrashes": { "$ref": "#/definitions/noCollisionCrashes" },
							"disablePainting": { "$ref": "#/definitions/disablePainting" }
						},
						"required": [ "type", "carColours" ]
					}
				},
				"if": {
					"description": "If Shop or Facility",
					"properties": {
						"properties": {
							"properties": {
								"type": {
									"contains": {
										"enum": [ "food_stall", "drink_stall", "shop", "information_kiosk", "toilets", "cash_machine", "first_aid" ]
									}
								}
							}
						}
					}
				},
				"then": {
					"description": "For a shop/facility",
					"properties": {
						"properties": {
							"properties": {
								"sells": { "$ref": "#/definitions/sells" }
							},
							"required": [ "sells" ]
						}
					}
				},
				"else": {
					"description": "For an actual ride",
					"properties": {
						"properties": {
							"properties": {
								"swingMode": { "$ref": "#/definitions/swingMode" },
								"rotationMode": { "$ref": "#/definitions/rotationMode" },
								"ratingMultipler": { "$ref": "#/definitions/ratingMultipler" },
								"minCarsPerTrain": { "$ref": "#/definitions/minCarsPerTrain" },
								"maxCarsPerTrain": { "$ref": "#/definitions/maxCarsPerTrain" },
								"carsPerFlatRide": { "$ref": "#/definitions/carsPerFlatRide" },
								"numEmptyCars": { "$ref": "#/definitions/numEmptyCars" },
								"defaultCar": { "$ref": "#/definitions/defaultCar" },
								"tabCar": { "$ref": "#/definitions/tabCar" },
								"tabScale": { "$ref": "#/definitions/tabScale" },
								"headCars": { "$ref": "#/definitions/headCars" },
								"tailCars": { "$ref": "#/definitions/tailCars" },
								"cars": { "$ref": "#/definitions/cars" }
							},
							"required": [ "cars" ]
						}
					}
				}
			}
		},
		{
			"title": "If Scenery Group",
			"if": {
				"properties": {
					"objectType": { "const": "scenery_group" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Footpath Banner",
			"if": {
				"properties": {
					"objectType": { "const": "footpath_banner" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Footpath Item",
			"if": {
				"properties": {
					"objectType": { "const": "footpath_item" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Large Scenery",
			"if": {
				"properties": {
					"objectType": { "const": "scenery_large" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Small Scenery",
			"if": {
				"properties": {
					"objectType": { "const": "scenery_small" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Wall",
			"if": {
				"properties": {
					"objectType": { "const": "scenery_wall" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Station",
			"if": {
				"properties": {
					"objectType": { "const": "station" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Terrain Edge",
			"if": {
				"properties": {
					"objectType": { "const": "terrain_edge" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Terrain Surface",
			"if": {
				"properties": {
					"objectType": { "const": "terrain_surface" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		},
		{
			"title": "If Water",
			"if": {
				"properties": {
					"objectType": { "const": "water" }
				}
			},
			"then": {
				"properties": {
					"properties": {
						"required": [ "scrollingMode", "textHeight" ]
					}
				}
			}
		}
	],
	"definitions": {
		"sourceString": {
			"title": "Source String",
			"type": "string",
			"enum": [ "rct1", "rct1aa", "rct1ll", "rct2", "rct2ww", "rct2tt", "official", "custom" ]
		},
		"colour": {
			"description": "Object color",
			"type": "string",
			"enum": [
				"black",
				"grey",
				"white",
				"dark_purple",
				"light_purple",
				"bright_purple",
				"dark_blue",
				"light_blue",
				"icy_blue",
				"teal",
				"aquamarine",
				"saturated_green",
				"dark_green",
				"moss_green",
				"bright_green",
				"olive_green",
				"dark_olive_green",
				"bright_yellow",
				"yellow",
				"dark_yellow",
				"light_orange",
				"dark_orange",
				"light_brown",
				"saturated_brown",
				"dark_brown",
				"salmon_pink",
				"bordeaux_red",
				"saturated_red",
				"bright_red",
				"dark_pink",
				"bright_pink",
				"light_pink"
			]
		},
		"type": {
			"description": "Array of ride types of this object. Currently only up to 3 are used",
			"type": "array",
			"items": [
				{
					"enum": [
						"spiral_rc",
						"stand_up_rc",
						"suspended_swinging_rc",
						"inverted_rc",
						"junior_rc",
						"miniature_railway",
						"monorail",
						"mini_suspended_rc",
						"boat_hire",
						"wooden_wild_mouse",
						"steeplechase",
						"car_ride",
						"launched_freefall",
						"bobsleigh_rc",
						"observation_tower",
						"looping_rc",
						"dinghy_slide",
						"mine_train_rc",
						"chairlift",
						"corkscrew_rc",
						"maze",
						"spiral_slide",
						"go_karts",
						"log_flume",
						"river_rapids",
						"dodgems",
						"swinging_ship",
						"swinging_inverter_ship",
						"food_stall",
						"drink_stall",
						"shop",
						"merry_go_round",
						"information_kiosk",
						"toilets",
						"ferris_wheel",
						"motion_simulator",
						"3d_cinema",
						"top_spin",
						"space_rings",
						"reverse_freefall_rc",
						"lift",
						"vertical_drop_rc",
						"cash_machine",
						"twist",
						"haunted_house",
						"first_aid",
						"circus",
						"ghost_train",
						"twister_rc",
						"wooden_rc",
						"side_friction_rc",
						"steel_wild_mouse",
						"multi_dimension_rc",
						"flying_rc",
						"virginia_reel",
						"splash_boats",
						"mini_helicopters",
						"lay_down_rc",
						"suspended_monorail",
						"reverser_rc",
						"heartline_twister_rc",
						"mini_golf",
						"giga_rc",
						"roto_drop",
						"flying_saucers",
						"crooked_house",
						"monorail_cycles",
						"compact_inverted_rc",
						"water_coaster",
						"air_powered_vertical_rc",
						"inverted_hairpin_rc",
						"magic_carpet",
						"submarine_ride",
						"river_rafts",
						"enterprise",
						"inverted_impulse_rc",
						"mini_rc",
						"mine_ride",
						"lim_launched_rc",
						"hypercoaster",
						"hyper_twister",
						"monster_trucks",
						"spinning_wild_mouse",
						"classic_mini_rc",
						"hybrid_rc",
						"single_rail_rc"
					]
				}
			]
		},
		"maxHeight": {
			"description": "Maximum height of the ride (if not set, or set to 0, uses the hardcoded value for the ridetype)",
			"type": "integer"
		},
		"carColours": {
			"description": "An array of preset color schemes for the ride. Currently, a ride can either have multiple presets (up to 254) with a single color scheme each (which are randomly chosen from when a ride is built), or it can have a single preset that has different color schemes for each train (car?).   \nNote: If there is more than one preset, only the first color scheme in each preset is used.",
			"type": "array",
			"minItems": 1,
			"items": {
				"$comment": "preset item",
				"type": "array",
				"minItems": 1,
				"items": {
					"$comment": "color scheme tuple",
					"type": "array",
					"items": [
						{ "$ref": "#/definitions/colour" },
						{ "$ref": "#/definitions/colour" },
						{ "$ref": "#/definitions/colour" }
					]
				}
			},
			"examples": [
				[
					[
						[ "bright_red", "white", "light_brown" ]
					],
					[
						[ "dark_green", "bright_green", "white" ]
					]
				]
			]
		},
		"scrollingMode": {
			"description": "Scrolling mode of the sign",
			"type": "integer"
		},
		"textHeight": {
			"description": "Height of the sign text",
			"type": "integer"
		},
		"supportType": {
			"description": "Type of supports used for path (0=Box,1=Pole)",
			"type": [ "string", "integer" ],
			"enum": [ "pole", "box", 1, 0 ],
			"default": "box"
		},
		"hasSupportImages": {
			"description": "True if object has images for path supports",
			"type": "boolean",
			"default": false
		},
		"hasElevatedPathImages": {
			"description": "True if object has images for elevated path",
			"type": "boolean",
			"default": false
		},
		"editorOnly": {
			"description": "True if path is normally only available in the scenario editor",
			"type": "boolean",
			"default": false
		},
		"noSlopeRailings": {
			"description": "True if path has no railings on slopes",
			"type": "boolean",
			"default": false
		},
		"isQueue": {
			"description": "True if path surface is for a queue",
			"type": "boolean",
			"default": false
		},
		"originalStyleId": {
			"description": "Original Music Style ID (used for most music except for merry_go_round). Original list:  \n```\nMUSIC_STYLE_DODGEMS_BEAT,  \nMUSIC_STYLE_FAIRGROUND_ORGAN,  \nMUSIC_STYLE_ROMAN_FANFARE,  \nMUSIC_STYLE_ORIENTAL,  \nMUSIC_STYLE_MARTIAN,  \nMUSIC_STYLE_JUNGLE_DRUMS,  \nMUSIC_STYLE_EGYPTIAN,  \nMUSIC_STYLE_TOYLAND,  \nMUSIC_STYLE_CIRCUS_SHOW,  \nMUSIC_STYLE_SPACE,  \nMUSIC_STYLE_HORROR,  \nMUSIC_STYLE_TECHNO,  \nMUSIC_STYLE_GENTLE,  \nMUSIC_STYLE_SUMMER,  \nMUSIC_STYLE_WATER,  \nMUSIC_STYLE_WILD_WEST,  \nMUSIC_STYLE_JURASSIC,  \nMUSIC_STYLE_ROCK,  \nMUSIC_STYLE_RAGTIME,  \nMUSIC_STYLE_FANTASY,  \nMUSIC_STYLE_ROCK_STYLE_2,  \nMUSIC_STYLE_ICE,  \nMUSIC_STYLE_SNOW,  \nMUSIC_STYLE_CUSTOM_MUSIC_1,  \nMUSIC_STYLE_CUSTOM_MUSIC_2,  \nMUSIC_STYLE_MEDIEVAL,  \nMUSIC_STYLE_URBAN,  \nMUSIC_STYLE_ORGAN,  \nMUSIC_STYLE_MECHANICAL,  \nMUSIC_STYLE_MODERN,  \nMUSIC_STYLE_PIRATES,  \nMUSIC_STYLE_ROCK_STYLE_3,  \nMUSIC_STYLE_CANDY_STYLE  \n```",
			"type": "integer"
		},
		"rideTypes": {
			"description": "Array of ride types this music can be used for. If this is not included, then music is available for all rides except merry-go-round",
			"type": "array",
			"items": [
				{
					"enum": [
						"spiral_rc",
						"stand_up_rc",
						"suspended_swinging_rc",
						"inverted_rc",
						"junior_rc",
						"miniature_railway",
						"monorail",
						"mini_suspended_rc",
						"boat_hire",
						"wooden_wild_mouse",
						"steeplechase",
						"car_ride",
						"launched_freefall",
						"bobsleigh_rc",
						"observation_tower",
						"looping_rc",
						"dinghy_slide",
						"mine_train_rc",
						"chairlift",
						"corkscrew_rc",
						"maze",
						"spiral_slide",
						"go_karts",
						"log_flume",
						"river_rapids",
						"dodgems",
						"swinging_ship",
						"swinging_inverter_ship",
						"food_stall",
						"drink_stall",
						"shop",
						"merry_go_round",
						"information_kiosk",
						"toilets",
						"ferris_wheel",
						"motion_simulator",
						"3d_cinema",
						"top_spin",
						"space_rings",
						"reverse_freefall_rc",
						"lift",
						"vertical_drop_rc",
						"cash_machine",
						"twist",
						"haunted_house",
						"first_aid",
						"circus",
						"ghost_train",
						"twister_rc",
						"wooden_rc",
						"side_friction_rc",
						"steel_wild_mouse",
						"multi_dimension_rc",
						"flying_rc",
						"virginia_reel",
						"splash_boats",
						"mini_helicopters",
						"lay_down_rc",
						"suspended_monorail",
						"reverser_rc",
						"heartline_twister_rc",
						"mini_golf",
						"giga_rc",
						"roto_drop",
						"flying_saucers",
						"crooked_house",
						"monorail_cycles",
						"compact_inverted_rc",
						"water_coaster",
						"air_powered_vertical_rc",
						"inverted_hairpin_rc",
						"magic_carpet",
						"submarine_ride",
						"river_rafts",
						"enterprise",
						"inverted_impulse_rc",
						"mini_rc",
						"mine_ride",
						"lim_launched_rc",
						"hypercoaster",
						"hyper_twister",
						"monster_trucks",
						"spinning_wild_mouse",
						"classic_mini_rc",
						"hybrid_rc",
						"single_rail_rc"
					]
				}
			]
		},
		"tracks": {
			"description": "Array of the tracks included in this music object (usually just one, but merry_go_round, for example, has multiple)",
			"type": "array",
			"properties": {
				"source": {
					"description": "Source location of the track",
					"type": "string"
				},
				"name": {
					"description": "Name of the track",
					"type": "string"
				},
				"composer": {
					"description": "Name of the composer of the track",
					"type": "string"
				}
			}
		},
		"sells": {
			"description": "The item(s) sold by the shop",
			"type": [ "array", "string" ],
			"anyOf": [
				{
					"enum": [
						"burger",
						"chips",
						"ice_cream",
						"candyfloss",
						"pizza",
						"popcorn",
						"hot_dog",
						"tentacle",
						"toffee_apple",
						"doughnut",
						"chicken",
						"pretzel",
						"funnel_cake",
						"beef_noodles",
						"fried_rice_noodles",
						"wonton_soup",
						"meatball_soup",
						"sub_sandwich",
						"cookie",
						"roast_sausage",
						"drink",
						"coffee",
						"lemonade",
						"chocolate",
						"iced_tea",
						"fruit_juice",
						"soybean_milk",
						"sujeonggwa",
						"balloon",
						"toy",
						"map",
						"photo",
						"umbrella",
						"voucher",
						"hat",
						"tshirt",
						"sunglasses"
					]
				},
				{
					"items": {
						"enum": [
							"burger",
							"chips",
							"ice_cream",
							"candyfloss",
							"pizza",
							"popcorn",
							"hot_dog",
							"tentacle",
							"toffee_apple",
							"doughnut",
							"chicken",
							"pretzel",
							"funnel_cake",
							"beef_noodles",
							"fried_rice_noodles",
							"wonton_soup",
							"meatball_soup",
							"sub_sandwich",
							"cookie",
							"roast_sausage",
							"drink",
							"coffee",
							"lemonade",
							"chocolate",
							"iced_tea",
							"fruit_juice",
							"soybean_milk",
							"sujeonggwa",
							"balloon",
							"toy",
							"map",
							"photo",
							"umbrella",
							"voucher",
							"hat",
							"tshirt",
							"sunglasses"
						]
					}
				}
			]
		},
		"swingMode": {
			"description": "If set to 1 or 2, indicates alternate swing modes that are used for some rides",
			"type": "integer",
			"enum": [ 0, 1, 2 ],
			"default": 0
		},
		"rotationMode": {
			"description": "If set to 1, indicates alternate rotation modes used for twist, if set to 2, indicates alternate rotation mode used for enterprise",
			"type": "integer",
			"enum": [ 0, 1, 2 ],
			"default": 0
		},
		"ratingMultipler": {
			"description": "Additional rating multiplier(s) for this specific ride subtype (this is separate from the rating multipliers that are hardcoded for each ride type)",
			"type": "object",
			"properties": {
				"excitement": { "type": "integer" },
				"intensity": { "type": "integer" },
				"nausea": { "type": "integer" }
			}
		},
		"carsPerFlatRide": {
			"description": "The number of cars, for a flat ride",
			"type": "integer",
			"default": 255
		},
		"tabCar": {
			"description": "The index of the car that should show in the gui tab for this ride (0 if not specified)",
			"type": "number",
			"default": 0
		},
		"tabScale": {
			"description": "If <= 0.5, this will scale the size of the tab preview in half",
			"type": "number"
		},
		"numEmptyCars": {
			"description": "The number of \"zero\" cars in the train. That is, cars that do not hold any guests",
			"type": "integer",
			"minimum": 0,
			"default": 0
		},
		"minCarsPerTrain": {
			"description": "Minimum number of cars that can be in a train",
			"type": "integer",
			"examples": [ 4 ],
			"default": 1
		},
		"maxCarsPerTrain": {
			"description": "Maximum number of cars that can be in a train",
			"type": "integer",
			"examples": [ 12 ],
			"default": 1
		},
		"defaultCar": {
			"description": "Index of the car that should be used as the default car for this ride. In other words, this is the normal car that appears throughout the train wherever there isn't a special (i.e. front or rear) car  \n0 if not specified",
			"type": "integer",
			"examples": [ 1 ],
			"default": 0
		},
		"tailCars": {
			"description": "Index of the car that should be used as the tail car, if any (the code supports listing an array instead of just a single index here, but currently only the first index listed is used)",
			"type": "integer"
		},
		"headCars": {
			"description": "The index(es) of up to three cars that should be used to fill the front of a train",
			"type": [ "array", "number" ],
			"items": { "type": "integer" },
			"examples": [ 0 ]
		},
		"category": {
			"description": "[Deprecated] Ride category is now determined from the type",
			"type": "string",
			"examples": [ "rollercoaster" ]
		},
		"cars": {
			"description": "The cars in this ride",
			"anyOf": [
				{
					"title": "A car object",
					"$ref": "#/definitions/carItem"
				},
				{
					"title": "Array of car objects",
					"type": "array",
					"items": {
						"$ref": "#/definitions/carItem"
					}
				}
			]
		},
		"carItem": {
			"properties": {
				"rotationFrameMask": {
					"description": "A bitmask indicating which rotation frames this car has, for rendering spinning car in the UI?",
					"type": "integer",
					"examples": [ 31 ]
				},
				"spacing": {
					"description": "The space taken up by this car (I have no idea what the units are tbh)",
					"type": "integer",
					"examples": [ 146000 ]
				},
				"mass": {
					"description": "Mass of this car",
					"type": "integer",
					"examples": [ 650 ]
				},
				"tabOffset": {
					"description": "If used, adds a vertical offset to this car when rendered in the UI",
					"type": "integer"
				},
				"numSeats": {
					"description": "Number of seats that this car holds",
					"type": "integer",
					"examples": [ 1 ]
				},
				"seatsInPairs": {
					"description": "If set, indicates that guests sit in this car in pairs",
					"type": "boolean"
				},
				"spriteWidth": {
					"description": "For manually entering the sprite width for this car. This is only used if VEHICLE_ENTRY_FLAG_10 is set, which seems to only be for non-tracked-rides (?), otherwide this value is calculated.",
					"type": "integer"
				},
				"spriteHeightNegative": {
					"description": "For manually entering the sprite height below the origin for this car. This is only used if VEHICLE_ENTRY_FLAG_10 is set, which seems to only be for non-tracked-rides (?), otherwide this value is calculated.",
					"type": "integer"
				},
				"spriteHeightPositive": {
					"description": "For manually entering the sprite height above the origin for this car. This is only used if VEHICLE_ENTRY_FLAG_10 is set, which seems to only be for non-tracked-rides (?), otherwide this value is calculated.",
					"type": "integer"
				},
				"animation": {
					"description": "Indicates a special animation mode to use for this car.  \n  \n1: Miniature Railway  \n2: Swan boats  \n3: Canoes  \n4: Row boats  \n5: Water tricycles  \n6: Observation tower  \n7: Helicars  \n8: Monorail cycles  \n9: Multidimensional Coaster",
					"type": "integer",
					"minimum": 0,
					"maximum": 9,
					"default": 0
				},
				"baseNumFrames": {
					"description": "The number of frames (angles) of rotation when this car is flat. This number is always calculated now so it shouldn't be specified",
					"type": "integer"
				},
				"numImages": {
					"description": "The total number of sprites for this car. This number is always calculated now so it shouldn't be specified",
					"type": "integer"
				},
				"numSeatRows": {
					"type": "integer",
					"examples": [ 1 ]
				},
				"spinningInertia": { "type": "integer" },
				"spinningFriction": { "type": "integer" },
				"frictionSoundId": {
					"type": "integer",
					"examples": [ 57 ]
				},
				"logFlumeReverserVehicleType": {
					"type": "integer",
					"examples": [ 0 ]
				},
				"soundRange": { "type": "integer" },
				"doubleSoundFrequency": { "type": "integer" },
				"poweredAcceleration": { "type": "integer" },
				"poweredMaxSpeed": { "type": "integer" },
				"carVisual": { "type": "integer" },
				"effectVisual": { "type": "integer" },
				"drawOrder": {
					"type": "integer",
					"examples": [ 7 ]
				},
				"numVerticalFramesOverride": {
					"description": "When VEHICLE_ENTRY_FLAG_OVERRIDE_NUM_VERTICAL_FRAMES is set, this value overrides the calculated value",
					"type": "integer"
				},
				"loadingPositions": {
					"description": "A list of the different loading positions for this car",
					"type": "array",
					"items": {
						"type": [ "array", "integer" ],
						"items": { "type": "integer" }
					}
				},
				"loadingWaypoints": {
					"description": "A list of the different loading waypoints guests should use for this car",
					"type": "array",
					"items": {
						"type": [ "array", "integer" ],
						"items": { "type": "integer" }
					}
				},
				"numSegments": {
					"description": "If loadingWaypoints is used, the number of segments",
					"type": "integer"
				},
				"frames": {
					"description": "A list of the different sets of sprites that this car has",
					"type": "object",
					"properties": {
						"flat": {
							"description": "If set, this car has sprites for flat track",
							"type": "boolean"
						},
						"gentleSlopes": {
							"description": "If set, this car has sprites for gentle slopes",
							"type": "boolean"
						},
						"steepSlopes": {
							"description": "If set, this car has sprites for steep slopes",
							"type": "boolean"
						},
						"verticalSlopes": {
							"description": "If set, this car has sprites for vertical slopes",
							"type": "boolean"
						},
						"diagonalSlopes": {
							"description": "If set, this car has sprites for diagonal slopes",
							"type": "boolean"
						},
						"flatBanked": {
							"description": "If set, this car has sprites for banked, flat track",
							"type": "boolean"
						},
						"inlineTwists": {
							"description": "If set, this car has sprites for inline twists",
							"type": "boolean"
						},
						"flatToGentleSlopeBankedTransitions": {
							"description": "If set, this car has sprites for flat track to banked gentle sloped track",
							"type": "boolean"
						},
						"diagonalGentleSlopeBankedTransitions": {
							"description": "If set, this car has sprites for diagonal banked to unbanked, gentle sloped track transitions",
							"type": "boolean"
						},
						"gentleSlopeBankedTransitions": {
							"description": "If set, this car has sprites for banked to unbanked, gentle sloped track transitions",
							"type": "boolean"
						},
						"gentleSlopeBankedTurns": {
							"description": "If set, this car has sprites for banked gentle sloping turns",
							"type": "boolean"
						},
						"flatToGentleSlopeWhileBankedTransitions": {
							"description": "If set, this car has sprites for banked flat track to banked gentle slope",
							"type": "boolean"
						},
						"corkscrews": {
							"description": "If set, this car has sprites for corkscrews",
							"type": "boolean"
						},
						"restraintAnimation": {
							"description": "If set, this car has sprites for restraints opening and closing",
							"type": "boolean"
						},
						"curvedLiftHill": {
							"description": "If set, this car has sprites for a curved lift-hill",
							"type": "boolean"
						}
					}
				},
				"VEHICLE_ENTRY_FLAG_POWERED_RIDE_UNRESTRICTED_GRAVITY": {"description": "Set on powered vehicles that do not slow down when going down a hill", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_NO_UPSTOP_WHEELS": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_NO_UPSTOP_BOBSLEIGH": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_MINI_GOLF": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_4": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_5": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_HAS_INVERTED_SPRITE_SET": {"description": "Set on vehicles that support running inverted for extended periods of time, i.e. the Flying, Lay-down and Multi-dimension RCs.", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_DODGEM_INUSE_LIGHTS": {"description": "When set the vehicle has an additional frame for when in use. Used only by dodgems.", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_ALLOW_DOORS_DEPRECATED": {"description": "[Deprecated] Not used any more since every vehicle will now work with doors", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_ENABLE_ADDITIONAL_COLOUR_2": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_10": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_11": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_OVERRIDE_NUM_VERTICAL_FRAMES": {"description": "Setting this will cause the game to use numVerticalFramesOverride instead of calculating it", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_13": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_SPINNING_ADDITIONAL_FRAMES": {"description": "16x additional frames for vehicle. A spinning item with additional frames must always face forward to load/unload. Spinning without can load/unload at 4 rotations.", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_LIFT": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_ENABLE_ADDITIONAL_COLOUR_1": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_SWINGING": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_SPINNING": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_POWERED": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_RIDERS_SCREAM": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_21": {"description": "Swinging coaster??", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_BOAT_HIRE_COLLISION_DETECTION": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_VEHICLE_ANIMATION": {"description": "Set on animated vehicles like the Multi-dimension coaster trains, Miniature Railway locomotives and Helicycles.", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_RIDER_ANIMATION": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_25": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_SLIDE_SWING": {"description": "Set on dingy slides. They have there own swing value calculations and have a different amount of images.", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_CHAIRLIFT": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_WATER_RIDE": {"description": "Set on rides where water would provide continuous propulsion", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_GO_KART": {"description": "", "type": "boolean" }, 
				"VEHICLE_ENTRY_FLAG_DODGEM_CAR_PLACEMENT": {"description": "", "type": "boolean" }
			}
		},
		"buildMenuPriority": {
			"description": "For rides that do no list their subtypes separately, this number describes the priority order for which subtype should show for the generic ride type in the build menu. Of all the subtypes that are available and researched, whichever has the highest buildMenuPriority will show as representative of the generic ride type.",
			"type": "integer",
			"minimum": 0,
			"maximum": 255
		},
		"noInversions": {
			"description": "Flagged if the ride does not support inversions",
			"type": "boolean",
			"default": false
		},
		"noBanking": {
			"description": "Flagged if the ride does not support banking",
			"type": "boolean",
			"default": false
		},
		"playDepartSound": {
			"description": "Flagged if the ride plays a departure sound when departing the station. depending on sound_range setting, plays Tram or Train departing sound.",
			"type": "boolean",
			"default": false
		},
		"playSplashSound": {
			"description": "Flagged if the ride should play a splashing sound on down to flat elements",
			"type": "boolean",
			"default": false
		},
		"playSplashSoundSlide": {
			"description": "Flagged if the ride should play a splashing sound when entering a water channel, for water coasters. Has no effect if playSplashSound is enabled.  \nNote: Internally, water channel track is coded as \"covered\" track, so if this flag is set for a ride running on a track that supports covered pieces, it will play a splash sound when entering a covered section of track.",
			"type": "boolean",
			"default": false
		},
		"hasShelter": {
			"description": "Flagged if the ride is covered (for example, monorail cars are covered)  \nNote that there are some ride types in vanilla RCT2 that seem to have this bit set illogically. Pickup-trucks did not have this set, and the uncovered ski lift cars did have these set. These have been changed in OpenRCT2 to make more sense.",
			"type": "boolean",
			"default": false
		},
		"limitAirTimeBonus": {
			"description": "Flagged if the ride should have a hard cap on how much bonus it gets from airtime. This is only set for heartline-twister coasters, and makes it so that a max of ~2 seconds of airtime can give an excitement bonus.",
			"type": "boolean",
			"default": false
		},
		"disableBreakdown": {
			"description": "Flagged if the ride does not break down",
			"type": "boolean",
			"default": false
		},
		"noCollisionCrashes": {
			"description": "Flagged if the ride does not crash when vehicles collide",
			"type": "boolean",
			"default": false
		},
		"disablePainting": {
			"description": "Flagged if the ride does not support recolouring",
			"type": "boolean",
			"default": false
		}
	}
}